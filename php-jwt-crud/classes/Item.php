<?php

/**
  Generated by PHPistols
  The PHP code generator https://www.phpistols.com
 */
class Item {

    var $conn;
    var $list;
    var $id;
    var $itemId;
    var $locationId;
    var $issueDate;
    var $returnDate;
    var $issueStatus;
    var $returnStatus;
    var $remark;
    var $add_date;

    /**
     * Constructor
     * @param $conn PDO db connection
     */
    public function __construct($conn) {
        $this->conn = $conn;
    }

    public function init($id, $itemId, $locationId, $issueDate, $returnDate, $issueStatus, $returnStatus, $remark) {
        $this->id = $id;
        $this->itemId = $itemId;
        $this->locationId = $locationId;
        $this->issueDate = $issueDate;
        $this->returnDate = $returnDate;
        $this->issueStatus = $issueStatus;
        $this->returnStatus = $returnStatus;
        $this->remark = $remark;
    }

    /**
     * Add a row in item.
     * @return int 0 or 1
     */
    function issueItem($itemObj) {

        $query = "  INSERT INTO item  ( item_id, location_id, issue_date, issue_status,remark)
                    VALUES (
                    :itemId,
                    :locationId,
                    :issueDate,
                    :issueStatus,
                    :remark
                    )";

        $q = $this->conn->prepare($query);
        $q->execute(array(':itemId' => $itemObj->itemId,
            ':locationId' => $itemObj->locationId,
            ':issueDate' => $itemObj->issueDate,
            ':issueStatus' => $itemObj->issueStatus,
            ':remark' => $itemObj->remark
        ));
        if ($this->conn->lastInsertId() != 0) {
            return 1;
        } else {
            //var_dump($q->errorInfo());
            //$q->debugDumpParams();
            return(0);
        }
    }

    /**
     * Update a row in item.
     * @return int 0 or 1
     */
    function updateIssueItem($itemObj) {
        $query = "  UPDATE item SET
                    item_id = :itemId,
                    locationId = :locationId,
                    issueDate = :issueDate,
                    issueStatus = :issueStatus
            WHERE id = :id ";

        $q = $this->conn->prepare($query);
        $q->execute(
                array(':itemId' => $itemObj->itemId,
                    ':locationId' => $itemObj->locationId,
                    ':issueDate' => $itemObj->issueDate,
                    ':issueStatus' => $itemObj->issueStatus,
                    ':id' => $itemObj->id));
        if ($q->rowCount() == 1) {
            return (1);
        } else {
            //var_dump($q->errorInfo());
            //$q->debugDumpParams();
            return(0);
        }
    }

    function returnItem($itemObj) {
        $query = "  UPDATE item SET
                    return_date = :returnDate,
                    return_status = :returnStatus
            WHERE id = :id ";

        $q = $this->conn->prepare($query);
        $q->execute(
                array(':returnDate' => $itemObj->returnStatus,
                    ':returnStatus' => $itemObj->returnStatus,
                    ':id' => $itemObj->id));
        if ($q->rowCount() == 1) {
            return (1);
        } else {
            //var_dump($q->errorInfo());
            //$q->debugDumpParams();
            return(0);
        }
    }

    /**
     * Delete a row in item.
     * @param Int id_user
     * @return int 0 or 1
     */
    function del($id) {
        $query = "DELETE FROM item WHERE id = :id";

        $q = $this->conn->prepare($query);
        $q->execute(array(':id' => $id));
        $st = $q->rowCount();
        if ($st == 1) {
            return (1);
        } else {
            //var_dump($q->errorInfo());
            //$q->debugDumpParams();
            return(0);
        }
    }

    /**
     * Get a row in item.
     * @param Int id_user
     * @return int 0 or 1
     */
    function fetch($id) {

        $query = "  SELECT *
                    FROM Item 
                    WHERE id = :id";

        $q = $this->conn->prepare($query);
        if ($q->execute(array(':id' => $id))) {
            $this->list = array();
            $i = 0;
            while ($row = $q->fetch(PDO::FETCH_ASSOC)) {
                $this->list[$i]['id'] = $row['id'];
                $this->list[$i]['itemId'] = $row['item_id'];
                $this->list[$i]['locationId'] = $row['location_id'];
                $this->list[$i]['issueDate'] = $row['issue_date'];
                $this->list[$i]['issueStatus'] = $row['issue_status'];
                $this->list[$i]['returnDate'] = $row['return_date'];
                $this->list[$i]['returnStatus'] = $row['return_status'];
                $this->list[$i]['remark'] = $row['remark'];
                $this->list[$i]['addDate'] = $row['add_date'];
                $i++;
            }
            return ($this->list);
        } else {
            //var_dump($q->errorInfo());
            //$q->debugDumpParams();
            return(0);
        }
    }

    /**
     * Get a list of row in item.
     * @param Int limitFrom
     * @param Int limitNumber
     * @param char orderBy
     * @param Int order
     * @return int 0 or Number of elements
     */
    function fetchAll($limitFrom = 0, $limitNumber = 30, $orderBy = 'b.`id`', $order = 'ASC') {

        $query = "  SELECT *
                    FROM item AS b order by :orderBy :order limit :limitFrom, :limitNumber";

        if ($order != 'ASC') {
            $order = 'DESC';
        }

        $q = $this->conn->prepare($query);

        $q->bindValue(':orderBy', intval($orderBy), PDO::PARAM_STR);
        $q->bindValue(':order', intval($order), PDO::PARAM_STR);
        $q->bindValue(':limitFrom', intval($limitFrom), PDO::PARAM_INT);
        $q->bindValue(':limitNumber', intval($limitNumber), PDO::PARAM_INT);

        if ($q->execute()) {
            $this->list = array();
            $i = 0;
            while ($row = $q->fetch(PDO::FETCH_ASSOC)) {
                $this->list[$i]['id'] = $row['id'];
                $this->list[$i]['itemId'] = $row['item_id'];
                $this->list[$i]['locationId'] = $row['location_id'];
                $this->list[$i]['issueDate'] = $row['issue_date'];
                $this->list[$i]['issueStatus'] = $row['issue_status'];
                $this->list[$i]['returnDate'] = $row['return_date'];
                $this->list[$i]['returnStatus'] = $row['return_status'];
                $this->list[$i]['remark'] = $row['remark'];
                $this->list[$i]['addDate'] = $row['add_date'];
                $i++;
            }
            return ($this->list);
        } else {
            // var_dump($q->errorInfo());
            // $q->debugDumpParams();
            return(0);
        }
    }

    /**
     * Count row in item    * @return int 0 or Number of elements
     */
    function count() {

        $query = "SELECT COUNT(*) AS nbRows
        FROM item";

        $q = $this->conn->prepare($query);

        if ($q->execute()) {
            if ($row = $q->fetch(PDO::FETCH_ASSOC)) {
                return($row['nbRows']);
            }
        } else {
            //var_dump($q->errorInfo());
            //$q->debugDumpParams();
            return(0);
        }
    }

}

?>
    